{
  "version": "3.2",
  "log": [
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:57",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)56_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)56_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)56_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2582_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2305_storage"
                }
              ]
            },
            "t_struct(Set)2305_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32",
        "version": {
          "withMetadata": "f02304b02d512fa75cb030785bff1e82b0deb397decad073e2350476332a8de9",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "13519b4871aaa15ea25a34e9ceded93c628b938ba18bbb4dbbc293d47a22b903",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "a2f2c1eab56e19f19a2cd1e1fac2044e27039b3d62bcaf9bb09e795357103334",
          "withoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89",
          "linkedWithoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "f92399347a007fdcc38c65570bc166f999d221f21737721477a713d934401fad",
          "withoutMetadata": "733e3562ea251fb830d7f1a08c5d1f515d8f06275711835c9f3238e05eabc358",
          "linkedWithoutMetadata": "733e3562ea251fb830d7f1a08c5d1f515d8f06275711835c9f3238e05eabc358"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:57",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)56_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)56_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)56_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2582_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2305_storage"
                }
              ]
            },
            "t_struct(Set)2305_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32",
        "version": {
          "withMetadata": "f02304b02d512fa75cb030785bff1e82b0deb397decad073e2350476332a8de9",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "13519b4871aaa15ea25a34e9ceded93c628b938ba18bbb4dbbc293d47a22b903",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "a2f2c1eab56e19f19a2cd1e1fac2044e27039b3d62bcaf9bb09e795357103334",
          "withoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89",
          "linkedWithoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "db0e8e1161bbc2736063b350442028e351d4a3cdeff19f2835d06cbf0ea43441",
          "withoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9",
          "linkedWithoutMetadata": "dcc48ce063994151028ddd38b6f3698e50de43612c654f7fd79d93be9a70c4c9"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:57",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)56_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)56_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)56_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2582_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2305_storage"
                }
              ]
            },
            "t_struct(Set)2305_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32",
        "version": {
          "withMetadata": "f02304b02d512fa75cb030785bff1e82b0deb397decad073e2350476332a8de9",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "13519b4871aaa15ea25a34e9ceded93c628b938ba18bbb4dbbc293d47a22b903",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "a2f2c1eab56e19f19a2cd1e1fac2044e27039b3d62bcaf9bb09e795357103334",
          "withoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89",
          "linkedWithoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "f92399347a007fdcc38c65570bc166f999d221f21737721477a713d934401fad",
          "withoutMetadata": "733e3562ea251fb830d7f1a08c5d1f515d8f06275711835c9f3238e05eabc358",
          "linkedWithoutMetadata": "733e3562ea251fb830d7f1a08c5d1f515d8f06275711835c9f3238e05eabc358"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:57",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)56_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)56_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)56_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2582_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2305_storage"
                }
              ]
            },
            "t_struct(Set)2305_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32",
        "version": {
          "withMetadata": "f02304b02d512fa75cb030785bff1e82b0deb397decad073e2350476332a8de9",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "13519b4871aaa15ea25a34e9ceded93c628b938ba18bbb4dbbc293d47a22b903",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "a2f2c1eab56e19f19a2cd1e1fac2044e27039b3d62bcaf9bb09e795357103334",
          "withoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89",
          "linkedWithoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "6a4c0bc524c47d3be71729adb42156c97fdebcd1c0db35c59c7403f70285df57",
          "withoutMetadata": "77c3361e7e66393ceb2b3565be9b6fa20a155b4de435e134dd7a09018809fe4b",
          "linkedWithoutMetadata": "77c3361e7e66393ceb2b3565be9b6fa20a155b4de435e134dd7a09018809fe4b"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:57",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)56_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)56_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)56_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2582_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2305_storage"
                }
              ]
            },
            "t_struct(Set)2305_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32",
        "version": {
          "withMetadata": "f02304b02d512fa75cb030785bff1e82b0deb397decad073e2350476332a8de9",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "13519b4871aaa15ea25a34e9ceded93c628b938ba18bbb4dbbc293d47a22b903",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "a2f2c1eab56e19f19a2cd1e1fac2044e27039b3d62bcaf9bb09e795357103334",
          "withoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89",
          "linkedWithoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "69a2d7b5a4b643427ee1c21b62674271a583bceed91c4e65e2c08a06025fb083",
          "withoutMetadata": "2f5608522f5fb46c0514c516b42b9187b4f6febd3107d7342f331aa62bc29806",
          "linkedWithoutMetadata": "2f5608522f5fb46c0514c516b42b9187b4f6febd3107d7342f331aa62bc29806"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          },
          {
            "kind": "state-variable-assignment",
            "name": "lastUpdateTime",
            "src": "contracts/pools/LPRewardPool.sol:83"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:57",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)56_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)56_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)56_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2582_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2305_storage"
                }
              ]
            },
            "t_struct(Set)2305_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32",
        "version": {
          "withMetadata": "f02304b02d512fa75cb030785bff1e82b0deb397decad073e2350476332a8de9",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "13519b4871aaa15ea25a34e9ceded93c628b938ba18bbb4dbbc293d47a22b903",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "a2f2c1eab56e19f19a2cd1e1fac2044e27039b3d62bcaf9bb09e795357103334",
          "withoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89",
          "linkedWithoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "b6b235b673aec7025bf5da10cfd26be72d1f540b21cc49db2d6b321a9cbe1571",
          "withoutMetadata": "d8b8a9849b224ad996fb1fed560caf855f11e22631474047102d723e90063878",
          "linkedWithoutMetadata": "d8b8a9849b224ad996fb1fed560caf855f11e22631474047102d723e90063878"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          },
          {
            "kind": "state-variable-assignment",
            "name": "lastUpdateTime",
            "src": "contracts/pools/LPRewardPool.sol:83"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:57",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)56_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)56_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)56_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2582_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2305_storage"
                }
              ]
            },
            "t_struct(Set)2305_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32",
        "version": {
          "withMetadata": "f02304b02d512fa75cb030785bff1e82b0deb397decad073e2350476332a8de9",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "13519b4871aaa15ea25a34e9ceded93c628b938ba18bbb4dbbc293d47a22b903",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "a2f2c1eab56e19f19a2cd1e1fac2044e27039b3d62bcaf9bb09e795357103334",
          "withoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89",
          "linkedWithoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "5e30feeac6fb2baf01b7932e3fab08effea58a8583cf1bbb517f25271ef37906",
          "withoutMetadata": "97003b69cd3e2ce73afde02b0d6e8e1f668b6a2f3bd01e5a5c833377aa86f0a0",
          "linkedWithoutMetadata": "97003b69cd3e2ce73afde02b0d6e8e1f668b6a2f3bd01e5a5c833377aa86f0a0"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          },
          {
            "kind": "state-variable-assignment",
            "name": "lastUpdateTime",
            "src": "contracts/pools/LPRewardPool.sol:83"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:57",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)56_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)56_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)56_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2582_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2305_storage"
                }
              ]
            },
            "t_struct(Set)2305_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32",
        "version": {
          "withMetadata": "f02304b02d512fa75cb030785bff1e82b0deb397decad073e2350476332a8de9",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "13519b4871aaa15ea25a34e9ceded93c628b938ba18bbb4dbbc293d47a22b903",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "a2f2c1eab56e19f19a2cd1e1fac2044e27039b3d62bcaf9bb09e795357103334",
          "withoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89",
          "linkedWithoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "19b1e44e4d5b553627856d79560b5175480d9f8dc81307b76dc1adf358a681cb",
          "withoutMetadata": "375296deff59264c2d5b0b5adb9bcf38e7ba5d94e68618b30fe2507651e1deb3",
          "linkedWithoutMetadata": "375296deff59264c2d5b0b5adb9bcf38e7ba5d94e68618b30fe2507651e1deb3"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          },
          {
            "kind": "state-variable-assignment",
            "name": "lastUpdateTime",
            "src": "contracts/pools/LPRewardPool.sol:83"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:57",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)56_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)56_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)56_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2582_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2305_storage"
                }
              ]
            },
            "t_struct(Set)2305_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32",
        "version": {
          "withMetadata": "f02304b02d512fa75cb030785bff1e82b0deb397decad073e2350476332a8de9",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "13519b4871aaa15ea25a34e9ceded93c628b938ba18bbb4dbbc293d47a22b903",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "a2f2c1eab56e19f19a2cd1e1fac2044e27039b3d62bcaf9bb09e795357103334",
          "withoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89",
          "linkedWithoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "276b1cf2c1771e6070f7244c610abb5a0e10415d3a74f5417023f9695c0b6e8e",
          "withoutMetadata": "1351f5dda03362d7d752a029ec4c680d3ae0a516d30c848b89c8d3818a287123",
          "linkedWithoutMetadata": "1351f5dda03362d7d752a029ec4c680d3ae0a516d30c848b89c8d3818a287123"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:57",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)56_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)56_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)56_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2582_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2305_storage"
                }
              ]
            },
            "t_struct(Set)2305_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32",
        "version": {
          "withMetadata": "f02304b02d512fa75cb030785bff1e82b0deb397decad073e2350476332a8de9",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "13519b4871aaa15ea25a34e9ceded93c628b938ba18bbb4dbbc293d47a22b903",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "a2f2c1eab56e19f19a2cd1e1fac2044e27039b3d62bcaf9bb09e795357103334",
          "withoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89",
          "linkedWithoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "45674d22aef9e4b127d71834f615a167ed6c2246ff779647ce0fee8ea2870257",
          "withoutMetadata": "e9caa28dee6a1b1d02ea1184b3f7e5df71f6d23011995045ecffd9aec7095f78",
          "linkedWithoutMetadata": "e9caa28dee6a1b1d02ea1184b3f7e5df71f6d23011995045ecffd9aec7095f78"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:57",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)56_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)56_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)56_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2582_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2305_storage"
                }
              ]
            },
            "t_struct(Set)2305_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32",
        "version": {
          "withMetadata": "f02304b02d512fa75cb030785bff1e82b0deb397decad073e2350476332a8de9",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "13519b4871aaa15ea25a34e9ceded93c628b938ba18bbb4dbbc293d47a22b903",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "a2f2c1eab56e19f19a2cd1e1fac2044e27039b3d62bcaf9bb09e795357103334",
          "withoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89",
          "linkedWithoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "c4cd870ce14f3b9771e38dfd3725e459fe5895b0deea749e511756e43cf4b023",
          "withoutMetadata": "3b338fa11964c36a1bf1aa4d8b219317db895ebf1e74703dc4e8db137bf18607",
          "linkedWithoutMetadata": "3b338fa11964c36a1bf1aa4d8b219317db895ebf1e74703dc4e8db137bf18607"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:57",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)56_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)56_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)56_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2582_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2305_storage"
                }
              ]
            },
            "t_struct(Set)2305_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32",
        "version": {
          "withMetadata": "f02304b02d512fa75cb030785bff1e82b0deb397decad073e2350476332a8de9",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "13519b4871aaa15ea25a34e9ceded93c628b938ba18bbb4dbbc293d47a22b903",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "a2f2c1eab56e19f19a2cd1e1fac2044e27039b3d62bcaf9bb09e795357103334",
          "withoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89",
          "linkedWithoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "c4cd870ce14f3b9771e38dfd3725e459fe5895b0deea749e511756e43cf4b023",
          "withoutMetadata": "3b338fa11964c36a1bf1aa4d8b219317db895ebf1e74703dc4e8db137bf18607",
          "linkedWithoutMetadata": "3b338fa11964c36a1bf1aa4d8b219317db895ebf1e74703dc4e8db137bf18607"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:57",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)56_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)56_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)56_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2582_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2305_storage"
                }
              ]
            },
            "t_struct(Set)2305_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32",
        "version": {
          "withMetadata": "f02304b02d512fa75cb030785bff1e82b0deb397decad073e2350476332a8de9",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "13519b4871aaa15ea25a34e9ceded93c628b938ba18bbb4dbbc293d47a22b903",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "a2f2c1eab56e19f19a2cd1e1fac2044e27039b3d62bcaf9bb09e795357103334",
          "withoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89",
          "linkedWithoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "7170fab35ffc2433e0de372e85dac243400bfc377eebde0e79fcc2ab9b9558eb",
          "withoutMetadata": "d6ff4729aced3c80ae5d7e2371d70ca9450f1d2a9f16e8eb8765a57f19f6e81d",
          "linkedWithoutMetadata": "d6ff4729aced3c80ae5d7e2371d70ca9450f1d2a9f16e8eb8765a57f19f6e81d"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:57",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)56_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)56_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)56_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2582_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2305_storage"
                }
              ]
            },
            "t_struct(Set)2305_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32",
        "version": {
          "withMetadata": "f02304b02d512fa75cb030785bff1e82b0deb397decad073e2350476332a8de9",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "13519b4871aaa15ea25a34e9ceded93c628b938ba18bbb4dbbc293d47a22b903",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "a2f2c1eab56e19f19a2cd1e1fac2044e27039b3d62bcaf9bb09e795357103334",
          "withoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89",
          "linkedWithoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "5bcb3e8d5c1266e7a4b213c35be55b14cf59d95444b44ee61eef95fe4e5a85b0",
          "withoutMetadata": "38b4a1e807d821a711a36d7495b50d58e90ad3f9888c555f5c855ae16812947f",
          "linkedWithoutMetadata": "38b4a1e807d821a711a36d7495b50d58e90ad3f9888c555f5c855ae16812947f"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "withdrawReward(uint256)",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:93"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:81"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:82"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "operator",
              "type": "t_address",
              "src": "contracts/pools/LPRewardPool.sol:76"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:86"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "e428ebba6770374abf25a16048f3cda4fe53598e2bb466a522d230e9adcfb47e",
          "withoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041",
          "linkedWithoutMetadata": "d4a61f43cd6f243dfcd521d59c03039c26e85f72e470475fbf29deb97775b041"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalInput()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalInput",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:57",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)56_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)56_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)56_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2582_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2305_storage"
                }
              ]
            },
            "t_struct(Set)2305_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32",
        "version": {
          "withMetadata": "f02304b02d512fa75cb030785bff1e82b0deb397decad073e2350476332a8de9",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "13519b4871aaa15ea25a34e9ceded93c628b938ba18bbb4dbbc293d47a22b903",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "a2f2c1eab56e19f19a2cd1e1fac2044e27039b3d62bcaf9bb09e795357103334",
          "withoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89",
          "linkedWithoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:73",
        "version": {
          "withMetadata": "1aebc22ef54d85f764cc6b96db441c062958fc371b195df4071a5eb17d7e16f8",
          "withoutMetadata": "a17b8eac608c7676ad15f29d33c2f2f009030e7bc5fd4ed20373b432edcf915a",
          "linkedWithoutMetadata": "a17b8eac608c7676ad15f29d33c2f2f009030e7bc5fd4ed20373b432edcf915a"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:96"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:82"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:84"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:85"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:85"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:86"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:87"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:88"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:89"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "c355ad45730419573e8a602c2bf419bd72f25cd5d8ee07125218d22f6c3d2bca",
          "withoutMetadata": "3da6cf2d7e9482c4b9c66da861ba42acd9892b49cef541d120d5fbb7e5c4d9ca",
          "linkedWithoutMetadata": "3da6cf2d7e9482c4b9c66da861ba42acd9892b49cef541d120d5fbb7e5c4d9ca"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:57",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)56_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)56_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)56_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2582_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2305_storage"
                }
              ]
            },
            "t_struct(Set)2305_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32",
        "version": {
          "withMetadata": "f02304b02d512fa75cb030785bff1e82b0deb397decad073e2350476332a8de9",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "13519b4871aaa15ea25a34e9ceded93c628b938ba18bbb4dbbc293d47a22b903",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "a2f2c1eab56e19f19a2cd1e1fac2044e27039b3d62bcaf9bb09e795357103334",
          "withoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89",
          "linkedWithoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "0ba3d52f363b3e36d864ba28bc7aab95cc08b6ca2ef84f234eb17274eeba6118",
          "withoutMetadata": "2e02addaa6bfe54f3808422b9fe594bc1fd1471fc689e05b7a71d247c4399bc8",
          "linkedWithoutMetadata": "2e02addaa6bfe54f3808422b9fe594bc1fd1471fc689e05b7a71d247c4399bc8"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:92"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:78"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:80"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:78"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "c355ad45730419573e8a602c2bf419bd72f25cd5d8ee07125218d22f6c3d2bca",
          "withoutMetadata": "3da6cf2d7e9482c4b9c66da861ba42acd9892b49cef541d120d5fbb7e5c4d9ca",
          "linkedWithoutMetadata": "3da6cf2d7e9482c4b9c66da861ba42acd9892b49cef541d120d5fbb7e5c4d9ca"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:57",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)56_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)56_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)56_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2582_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2305_storage"
                }
              ]
            },
            "t_struct(Set)2305_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32",
        "version": {
          "withMetadata": "f02304b02d512fa75cb030785bff1e82b0deb397decad073e2350476332a8de9",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "13519b4871aaa15ea25a34e9ceded93c628b938ba18bbb4dbbc293d47a22b903",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "a2f2c1eab56e19f19a2cd1e1fac2044e27039b3d62bcaf9bb09e795357103334",
          "withoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89",
          "linkedWithoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:6",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:69",
        "version": {
          "withMetadata": "3cdc591866c193994b3d4720386161c3f7fa02eb5a66468f1e817c0bcab86c10",
          "withoutMetadata": "2e02addaa6bfe54f3808422b9fe594bc1fd1471fc689e05b7a71d247c4399bc8",
          "linkedWithoutMetadata": "2e02addaa6bfe54f3808422b9fe594bc1fd1471fc689e05b7a71d247c4399bc8"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:92"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:78"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:80"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:81"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPRewardPool.sol:75"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:78"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:84"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:85"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:8",
        "version": {
          "withMetadata": "c355ad45730419573e8a602c2bf419bd72f25cd5d8ee07125218d22f6c3d2bca",
          "withoutMetadata": "3da6cf2d7e9482c4b9c66da861ba42acd9892b49cef541d120d5fbb7e5c4d9ca",
          "linkedWithoutMetadata": "3da6cf2d7e9482c4b9c66da861ba42acd9892b49cef541d120d5fbb7e5c4d9ca"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPTokenWrapper.sol:12"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:15"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:57",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)56_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)56_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)56_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2582_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2305_storage"
                }
              ]
            },
            "t_struct(Set)2305_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32",
        "version": {
          "withMetadata": "f02304b02d512fa75cb030785bff1e82b0deb397decad073e2350476332a8de9",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "13519b4871aaa15ea25a34e9ceded93c628b938ba18bbb4dbbc293d47a22b903",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "a2f2c1eab56e19f19a2cd1e1fac2044e27039b3d62bcaf9bb09e795357103334",
          "withoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89",
          "linkedWithoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:5",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:68",
        "version": {
          "withMetadata": "d4fd1a95199b288ba5520a193bcd9167c0692407513fd24422d7805a863f7731",
          "withoutMetadata": "2e02addaa6bfe54f3808422b9fe594bc1fd1471fc689e05b7a71d247c4399bc8",
          "linkedWithoutMetadata": "2e02addaa6bfe54f3808422b9fe594bc1fd1471fc689e05b7a71d247c4399bc8"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:91"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:77"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:80"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPRewardPool.sol:74"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:77"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:78"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:84"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:7",
        "version": {
          "withMetadata": "928654e7846c11e6df04de413fd00e81d76389684eb33e2a87f8f78cc0363732",
          "withoutMetadata": "3da6cf2d7e9482c4b9c66da861ba42acd9892b49cef541d120d5fbb7e5c4d9ca",
          "linkedWithoutMetadata": "3da6cf2d7e9482c4b9c66da861ba42acd9892b49cef541d120d5fbb7e5c4d9ca"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPTokenWrapper.sol:11"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:13"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:57",
        "inherit": [
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControl",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)56_storage)",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:63"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(RoleData)56_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(RoleData)56_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32"
                }
              ]
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:19",
        "inherit": [
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [
          "EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AccessControlEnumerable",
              "label": "_roleMembers",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:22"
            }
          ],
          "types": {
            "t_mapping(t_bytes32,t_struct(AddressSet)2582_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_struct(AddressSet)2582_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)2305_storage"
                }
              ]
            },
            "t_struct(Set)2305_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)"
                }
              ]
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:16",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:32"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Pausable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts/security/Pausable.sol:27"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:32",
        "version": {
          "withMetadata": "f02304b02d512fa75cb030785bff1e82b0deb397decad073e2350476332a8de9",
          "withoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed",
          "linkedWithoutMetadata": "3a0e6862f0972474a53f6eb21733af1e6f1307470245382f02623f275f3440ed"
        },
        "inherit": [
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:33"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Pausable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:15",
        "inherit": [
          "Pausable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:17",
        "version": {
          "withMetadata": "d7f67c9c42dbca298b6c3c095a427a1cf0483ba46040e13986cf92992a99981a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "caa6a096a9ff871bda7fff4051da2363815001ea5911c6f87735b0d298baa003",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:8",
        "version": {
          "withMetadata": "27541f5dc000a809e92a3caef2a1b5120ff578991113e51868912862c57fa380",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "2937300fd607180f3b53535c55fe7207778bd2808a7002cde9e4831cf38b431f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:29",
        "version": {
          "withMetadata": "13519b4871aaa15ea25a34e9ceded93c628b938ba18bbb4dbbc293d47a22b903",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILiquidityProtectionService": {
        "src": "contracts/ILiquidityProtectionService.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLiquidityPool(address,address)",
          "LiquidityAmountTrap_preValidateTransfer(address,address,uint256,address,uint8,uint128)",
          "FirstBlockTrap_preValidateTransfer(address,address,uint256,address)",
          "LiquidityPercentTrap_preValidateTransfer(address,address,uint256,address,uint8,uint64)",
          "LiquidityActivityTrap_preValidateTransfer(address,address,uint256,address,uint8,uint8)",
          "isBlocked(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Standard": {
        "src": "contracts/Standard.sol:26",
        "version": {
          "withMetadata": "a2f2c1eab56e19f19a2cd1e1fac2044e27039b3d62bcaf9bb09e795357103334",
          "withoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89",
          "linkedWithoutMetadata": "8b538a7c34ef89c7e0faec6636ea0eeb02e312be6b9791c0aea2abe4fd1d4e89"
        },
        "inherit": [
          "UsingLiquidityProtectionService",
          "AccessControlEnumerable",
          "AccessControl",
          "ERC165",
          "IERC165",
          "IAccessControl",
          "ERC20Pausable",
          "Pausable",
          "ERC20",
          "IERC20",
          "Context",
          "IAccessControlEnumerable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "pause()",
          "unpause()",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Standard",
            "src": "contracts/Standard.sol:30"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UsingLiquidityProtectionService": {
        "src": "contracts/UsingLiquidityProtectionService.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "revokeBlocked(address[],address)",
          "disableProtection()",
          "isProtected()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "protected",
            "src": "contracts/UsingLiquidityProtectionService.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "UsingLiquidityProtectionService",
              "label": "protected",
              "type": "t_bool",
              "src": "contracts/UsingLiquidityProtectionService.sol:7"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IRewardDistributionRecipient": {
        "src": "contracts/pools/IRewardDistributionRecipient.sol:5",
        "inherit": [
          "Ownable",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "notifyRewardAmount(uint256)",
          "setRewardDistribution(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "IRewardDistributionRecipient",
              "label": "rewardDistribution",
              "type": "t_address",
              "src": "contracts/pools/IRewardDistributionRecipient.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETHSTNDLPTokenSharePool": {
        "src": "contracts/pools/LPRewardPool.sol:68",
        "version": {
          "withMetadata": "eb3c8769f467d662b094ed48d152c1cd00ec45cb8cafb1367a63ad27cd3e4bd0",
          "withoutMetadata": "2e02addaa6bfe54f3808422b9fe594bc1fd1471fc689e05b7a71d247c4399bc8",
          "linkedWithoutMetadata": "2e02addaa6bfe54f3808422b9fe594bc1fd1471fc689e05b7a71d247c4399bc8"
        },
        "inherit": [
          "IRewardDistributionRecipient",
          "Ownable",
          "Context",
          "LPTokenWrapper"
        ],
        "libraries": [
          "SafeMath",
          "SafeERC20",
          "Math"
        ],
        "methods": [
          "(address,address,uint256)",
          "lastTimeRewardApplicable()",
          "rewardPerToken()",
          "earned(address)",
          "stake(uint256)",
          "withdraw(uint256)",
          "exit()",
          "getReward()",
          "notifyRewardAmount(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WETHSTNDLPTokenSharePool",
            "src": "contracts/pools/LPRewardPool.sol:91"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initreward",
            "src": "contracts/pools/LPRewardPool.sol:77"
          },
          {
            "kind": "state-variable-assignment",
            "name": "periodFinish",
            "src": "contracts/pools/LPRewardPool.sol:79"
          },
          {
            "kind": "state-variable-assignment",
            "name": "rewardRate",
            "src": "contracts/pools/LPRewardPool.sol:80"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "stnd",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPRewardPool.sol:74"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "initreward",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:77"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "starttime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:78"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "periodFinish",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:79"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardRate",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:80"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "lastUpdateTime",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:81"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewardPerTokenStored",
              "type": "t_uint256",
              "src": "contracts/pools/LPRewardPool.sol:82"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "userRewardPerTokenPaid",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:83"
            },
            {
              "contract": "WETHSTNDLPTokenSharePool",
              "label": "rewards",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPRewardPool.sol:84"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "LPTokenWrapper": {
        "src": "contracts/pools/LPTokenWrapper.sol:7",
        "version": {
          "withMetadata": "928654e7846c11e6df04de413fd00e81d76389684eb33e2a87f8f78cc0363732",
          "withoutMetadata": "3da6cf2d7e9482c4b9c66da861ba42acd9892b49cef541d120d5fbb7e5c4d9ca",
          "linkedWithoutMetadata": "3da6cf2d7e9482c4b9c66da861ba42acd9892b49cef541d120d5fbb7e5c4d9ca"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "SafeERC20"
        ],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "stake(uint256)",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LPTokenWrapper",
              "label": "lpt",
              "type": "t_contract(IERC20)1293",
              "src": "contracts/pools/LPTokenWrapper.sol:11"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/pools/LPTokenWrapper.sol:13"
            },
            {
              "contract": "LPTokenWrapper",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/pools/LPTokenWrapper.sol:14"
            }
          ],
          "types": {
            "t_contract(IERC20)1293": {
              "label": "contract IERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}